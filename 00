import java.util.Scanner;
//true:impossible, false:possible
//100007090030020008009600500005300900010080002600004000300000010040000007007000300
public class Bracket{
		static byte mainBracket[][][][]=new byte[3][3][3][3];
		static boolean bmainBracket[][][][][]=new boolean[3][3][3][3][9];
		static byte temporaryBracket[][][][];
		static boolean btemporaryBracket[][][][][];
		static byte[][][][][] bracketS;
		static boolean[][][][][][] bbracketS;
		static boolean yon=false,yon2=false,allfinish=false;;
		static byte currentLayer=0;
		static byte[][] GuessPositionS;
		static byte[] TriedNumberS;
		static byte[][][][][] easyBracketS;
		static int[] easyScoreS;
		static int limitEasy;
		static byte sizeOfLevels;
	public static void main(String[] argb){
		byte t5;
		int c=0;
		long time[]=new long[2];
		int l1[]=new int[2];
		Scanner normalScanner=new Scanner(System.in);
		System.out.println("Type in the bracket you want to solve:");
		input();
		System.out.print("How many layers do you want the solver to guess, range:1-127(suggest 7):");
		sizeOfLevels=normalScanner.nextByte();
		System.out.print("How many brakets in maximum do you want the solver to remember, range:1- 10000  (suggest 20):");
		limitEasy=normalScanner.nextInt();
		bracketS=new byte[sizeOfLevels][3][3][3][3];
		bbracketS=new boolean[sizeOfLevels][3][3][3][3][9];
		GuessPositionS=new byte[sizeOfLevels][4];
		TriedNumberS=new byte[sizeOfLevels];
		easyBracketS=new byte[limitEasy][3][3][3][3];
		easyScoreS=new int[limitEasy];
		time[0]=System.currentTimeMillis();
		System.out.println("This is the original one:");
		print(true,-1);
		System.out.println();
		solve();
		System.out.println("That's the one without guessing:");
		print(true,-1);
		time[1]=System.currentTimeMillis();
		if(check()[0]==648){
			allfinish=true;
			c=-1;
			System.out.println("Perfect!");
		}else{
			System.out.println("The score is "+check()[0]+" .");
			System.out.println("It takes "+((double)(time[1]-time[0]))/1000+" second.");
			System.out.println("These are bracketS most "+limitEasy+" possible one(s):");
		}
		setLayerToMain(0);
		guess(0);
		for(int tu=0;tu<1000&&allfinish==false&&currentLayer>=0;tu++){
			yon2=false;
			for(t5=TriedNumberS[currentLayer];t5<9&&allfinish==false&&yon2==false&&c<limitEasy&&currentLayer>=0;t5++){
				if(bbracketS[currentLayer][GuessPositionS[currentLayer][0]][GuessPositionS[currentLayer][1]][GuessPositionS[currentLayer][2]][GuessPositionS[currentLayer][3]][t5]==false){
					TriedNumberS[currentLayer]=(byte) (t5+1);
					SetMainToLayer(currentLayer);
					mainBracket[GuessPositionS[currentLayer][0]][GuessPositionS[currentLayer][1]][GuessPositionS[currentLayer][2]][GuessPositionS[currentLayer][3]]=t5;
					set(GuessPositionS[currentLayer][0],GuessPositionS[currentLayer][1],GuessPositionS[currentLayer][2],GuessPositionS[currentLayer][3]);
					solve();
					l1[0]=check()[0];
					l1[1]=check()[1];
					if(l1[0]==648&&l1[1]==0){
						setEasyToMain(c);
						easyScoreS[c]=648;
						allfinish=true;
					}else if(l1[1]==0){
						if(currentLayer==sizeOfLevels-1){//too many layers to handle
							setEasyToMain(c);
							easyScoreS[c]=l1[0];
							c++;
							findlevel();
						}else{
							currentLayer++;
							setLayerToMain(currentLayer);
							guess(currentLayer);
							yon2=true;
						}
					}else{//not correct
					findlevel();
					}
				}
			}
		}
		if(c==-1){
		}else if(yon==true){
			print(false,c);
			System.out.println("Perfect!");
		}else{
			for(int t=0;t<c;t++){
				print(false,t);
				System.out.println("The score is "+easyScoreS[t]);
			}
		}
		time[1]=System.currentTimeMillis();
		System.out.println("It takes "+((double)(time[1]-time[0]))/1000+" second.");
	}
	public static void findlevel(){
		boolean j=true;
		for(byte tl=currentLayer;tl>=0&&j==true;tl--){
			for(byte tr=TriedNumberS[tl];tr<9;tr++){
				if(bbracketS[tl][GuessPositionS[tl][0]][GuessPositionS[tl][1]][GuessPositionS[tl][2]][GuessPositionS[tl][3]][tr]==false){
					j=false;
				}
			}
			if(j==true){
				TriedNumberS[currentLayer]=0;
				currentLayer--;
				yon2=true;
			}
		}
	}
	//set x[setint[0]]=0 and others are 1
	public static void allread(){
		byte countb;
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						countb=0;
						for(byte t=0;t<9;t++){
							if(bmainBracket[t1][t2][t3][t4][t]==false){
								mainBracket[t1][t2][t3][t4]=t;
								countb++;
							}
						}
						if(countb==1){}else{
							mainBracket[t1][t2][t3][t4]=-1;
						}
					}
				}
			}
		}
	}
//simply set x[0] ((-1) to 8) and y[0] (1/0) by Scanner
	public static void input(){
		Scanner scanner=new Scanner(System.in).useDelimiter("\\s*");
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						mainBracket[t1][t2][t3][t4]=(byte)(scanner.nextByte()-1);
						set(t1,t2,t3,t4);
					}
				}
			}
		}
	}
	public static void print(boolean isbegin, int i){//good
		if(isbegin){
			if(i==-1){
				temporaryBracket=mainBracket;
			}else{
				temporaryBracket=bracketS[i];
			}
		}else{
			temporaryBracket=easyBracketS[i];
		}
		System.out.println("|---------|---------|---------|");
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				System.out.print("|");
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						System.out.print(" "+(temporaryBracket[t1][t2][t3][t4]+1)+" ");
					}
					System.out.print("|");
				}
				System.out.println("");
			}
			System.out.println("|---------|---------|---------|");
		}
	}
	public static int[] check(){
		int chx1,chx2,chf1;
		chf1=0;chx2=0;
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						chx1=0;
						for(byte t5=0;t5<9;t5++){
							if(bmainBracket[t1][t2][t3][t4][t5]==true){
								chx1+=1;
								chx2+=1;
							}
						}
						if(chx1==9){
							chf1+=1;
						}
					}
				}
			}
		}
		int ch[]={chx2,chf1};
		return ch;
	}
	public static void solve(){
		int d;
		do{
			d=check()[0];
			method2();
			method3();
			method4();
			method5();
			allread();//fix everything
		}while(check()[0]>d);
	}
	public static void guess(int layer){
		byte j,aj=0;
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						if(bracketS[layer][t1][t2][t3][t4]==-1){
							j=0;
							for(byte t5=0;t5<9;t5++){
								if(bbracketS[layer][t1][t2][t3][t4][t5]==true){
									j++;
								}
							}
							if(j>aj){
								GuessPositionS[layer][0]=t1;GuessPositionS[layer][1]=t2;GuessPositionS[layer][2]=t3;GuessPositionS[layer][3]=t4;
								aj=j;
							}
						}
					}
				}
			}
		}
	}
	public static void method2(){
		byte l11,l12,l21,l22,l31,l32,chx1,chx2,chx3;
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t5=0;t5<9;t5++){
					l11=0;l12=0;l21=0;l22=0;l31=0;l32=0;chx1=0;chx2=0;chx3=0;
					for(byte t3=0;t3<3;t3++){
						for(byte t4=0;t4<3;t4++){
							if(bmainBracket[t1][t2][t3][t4][t5]==false){
								chx1+=1;
								l11=t3;l12=t4;
								}
							if(bmainBracket[t3][t4][t1][t2][t5]==false){
								l21=t3;l22=t4;
								chx2+=1;
							}
							if(bmainBracket[t1][t3][t2][t4][t5]==false){
								l31=t3;l32=t4;
								chx3+=1;
							}
						}
					}
					if(chx1==1){
						mainBracket[t1][t2][l11][l12]=t5;
						set(t1,t2,l11,l12);	
					}
					if(chx2==1){					
						mainBracket[l21][l22][t1][t2]=t5;
						set(l21,l22,t1,t2);
					}
					if(chx3==1){
						mainBracket[t1][l31][t2][l32]=t5;
						set(t1,l31,t2,l32);
					}
				}
			}
		}
	}
	public static void method3(){
		byte l1,l2,l3,l4,c11,c12,c21,c22,c31,c32,c41,c42;
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t5=0;t5<9;t5++){
					c12=0;c22=0;c32=0;c42=0;l1=0;l2=0;l3=0;l4=0;
					for(byte t3=0;t3<3;t3++){
						c11=0;c21=0;c31=0;c41=0;
			 			for(byte t4=0;t4<3;t4++){
			 				if(bmainBracket[t1][t3][t2][t4][t5]==false){
			 					c11+=1;
			 				}
			 				if(bmainBracket[t1][t4][t2][t3][t5]==false){
			 					c21+=1;
			 				}
			 				if(bmainBracket[t1][t2][t3][t4][t5]==false){
			 					c31+=1;
			 				}
			 				if(bmainBracket[t3][t4][t1][t2][t5]==false){
			 					c41+=1;
			 				}
			 			}
			 			if(c11!=0){
			 				c12+=1;
			 				l1=t3;
			 			}
			 			if(c21!=0){
			 				c22+=1;
			 				l2=t3;
			 			}
			 			if(c31!=0){
			 				c32+=1;
			 				l3=t3;
			 			}
			 			if(c41!=0){
			 				c42+=1;
			 				l4=t3;
			 			}
					}
					if(c12==1){
						for(byte t3=0;t3<3;t3++){
							if(t3!=t2){
								for(byte t4=0;t4<3;t4++){
									bmainBracket[t1][l1][t3][t4][t5]=true;
								}
							}
						}
					}
					if(c22==1){
						for(byte t3=0;t3<3;t3++){
							if(t3!=t1){
								for(byte t4=0;t4<3;t4++){
									bmainBracket[t3][t4][t2][l2][t5]=true;
								}
							}
						}
					}
					if(c32==1){
						for(byte t3=0;t3<3;t3++){
							if(t3!=t2){
								for(byte t4=0;t4<3;t4++){
									bmainBracket[t1][t3][l3][t4][t5]=true;
								}
							}
						}
					}
					if(c42==1){
						for(byte t3=0;t3<3;t3++){
							if(t3!=t2){
								for(byte t4=0;t4<3;t4++){
									bmainBracket[l4][t4][t1][t3][t5]=true;
								}
							}
						}
					}
				}
			}
		}
	}
	public static void method4(){
		byte l11,l12,l21,l22,l31,l32,l13,l14,l23,l24,l33,l34,c1,c2,c3;
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t5=0;t5<9;t5++){
					for(byte t6=0;(t6<9&&t6!=t5);t6++){
						l11=0;l12=0;l21=0;l22=0;l31=0;l32=0;l13=0;l14=0;l23=0;l24=0;l33=0;l34=0;c1=0;c2=0;c3=0;
						for(byte t3=0;t3<3;t3++){
							for(byte t4=0;t4<3;t4++){
								if(bmainBracket[t1][t2][t3][t4][t5]==false || bmainBracket[t1][t2][t3][t4][t6]==false){
									c1++;
									l11+=t3;l12+=t4;
									l13=t3;l14=t4;
								}
								if(bmainBracket[t1][t3][t2][t4][t5]==false || bmainBracket[t1][t3][t2][t4][t6]==false){
									c2++;
									l21+=t3;l22+=t4;
									l23=t3;l24=t4;
								}
								if(bmainBracket[t3][t4][t1][t2][t5]==false || bmainBracket[t3][t4][t1][t2][t6]==false){
									c3++;
									l31+=t3;l32+=t4;
									l33=t3;l34=t4;
								}
							}
						}
						if(c1==2){
							for(byte t3=0;t3<3;t3++){
								for(byte t4=0;t4<3;t4++){
									if((t3==l13 && t4==l14)||(t3==(l11-l13) && t4==(l12-l14))){}else{
										bmainBracket[t1][t2][t3][t4][t5]=true;
										bmainBracket[t1][t2][t3][t4][t6]=true;
									}
								}
							}
						}
						if(c2==2){	
							for(byte t3=0;t3<3;t3++){
								for(byte t4=0;t4<3;t4++){
									if((t3==l23 && t4==l24)||(t3==(l21-l23) && t4==(l22-l24))){}else{
		 								bmainBracket[t1][t3][t2][t4][t5]=true;
		 								bmainBracket[t1][t3][t2][t4][t6]=true;
									}
		 						}
							}
						}
						if(c3==2){	
							for(byte t3=0;t3<3;t3++){
		 						for(byte t4=0;t4<3;t4++){
		 							if((t3==l33 && t4==l34)||(t3==(l31-l33) && t4==(l32-l34))){}else{
		 								bmainBracket[t3][t4][t1][t2][t5]=true;
		 								bmainBracket[t3][t4][t1][t2][t6]=true;
									}
		 						}
							}
						}
					}
				}
			}
		}
	}
	public static void method5(){
		byte c11,c21,c31,c12,c22,c32,l11,l12,l13,l14,l21,l22,l23,l24,l31,l32,l33,l34;
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t5=0;t5<9;t5++){
					for(byte t6=(byte) (t5+1);t6<9;t6++){
						l11=0;l12=0;l21=0;l22=0;l31=0;l32=0;l13=0;l14=0;l23=0;l24=0;l33=0;l34=0;
						c12=0;c22=0;c32=0;
						for(byte t3=0;t3<3;t3++){
							for(byte t4=0;t4<3;t4++){
								c11=0;c21=0;c31=0;
								for(byte t7=0;t7<9;t7++){
									if(t7!=t5&&t7!=t6){
										if(bmainBracket[t1][t2][t3][t4][t7]==false){
											c11++;
										}
										if(bmainBracket[t3][t4][t1][t2][t7]==false){
											c21++;
										}
										if(bmainBracket[t1][t3][t2][t4][t7]==false){
											c31++;
										}
									}
								}
								if(c11==0){
									c12++;
									l11+=t3;l12+=t4;
									l13=t3;l14=t4;
								}
								if(c21==0){
									c22++;
									l21+=t3;l22+=t4;
									l23=t3;l24=t4;
								}
								if(c31==0){
									c32++;
									l31+=t3;l32+=t4;
									l33=t3;l34=t4;
								}
							}
						}
						for(byte t3=0;t3<3;t3++){
							for(byte t4=0;t4<3;t4++){
								if(c12!=2||(t3==l13&&t4==l14)||(t3==(l11-l13)&&t4==(l12-l14))){}else{
									bmainBracket[t1][t2][t3][t4][t5]=true;
									bmainBracket[t1][t2][t3][t4][t6]=true;
								}
								if(c22!=2||(t3==l23&&t4==l24)||(t3==(l21-l23)&&t4==(l22-l24))){}else{
									bmainBracket[t3][t4][t1][t2][t5]=true;
									bmainBracket[t3][t4][t1][t2][t6]=true;
								}
								if(c32!=2||(t3==l33&&t4==l34)||(t3==(l31-l33)&&t4==(l32-l34))){}else{
									bmainBracket[t1][t3][t2][t4][t5]=true;
									bmainBracket[t1][t3][t2][t4][t6]=true;
								}
	 		 		 		}
	 		 		 	}
					}
	 			}
			}
		}
	}
	public static void fullprint(boolean x[][][][][]){
		System.out.println("-------------------------------------------------------------------------------------------------");
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						System.out.print("|");
						for(byte t5=0;t5<3;t5++){
							for(byte t6=0;t6<3;t6++){
								if(x[t1][t2][t4][t5][(t3*3+t6)]==false){
									System.out.print(" "+(t3*3+t6+1)+" ");
								}else{
									System.out.print("   ");
								}
							}
							System.out.print("|");
						}
						System.out.print("|");
					}
					System.out.println("");
				}
				System.out.println("-------------------------------------------------------------------------------------------------");
			}
			System.out.println("-------------------------------------------------------------------------------------------------");
		}
	}
	public static void setLayerToMain(int layer){
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						bracketS[layer][t1][t2][t3][t4]=mainBracket[t1][t2][t3][t4];
						for(byte t5=0;t5<9;t5++){
							bbracketS[layer][t1][t2][t3][t4][t5]=bmainBracket[t1][t2][t3][t4][t5];
						}
					}
				}
			}
		}
	}
	public static void SetMainToLayer(int layer){
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						mainBracket[t1][t2][t3][t4]=bracketS[layer][t1][t2][t3][t4];
						for(byte t5=0;t5<9;t5++){
							bmainBracket[t1][t2][t3][t4][t5]=bbracketS[layer][t1][t2][t3][t4][t5];
						}
					}
				}
			}
		}
	}
	public static void setEasyToMain(int layer){
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						easyBracketS[layer][t1][t2][t3][t4]=mainBracket[t1][t2][t3][t4];
					}
				}
			}
		}
	}
	public static void set(int t1,int t2,int t3,int t4){
		if(mainBracket[t1][t2][t3][t4]!=-1){
			for(byte t=0;t<9;t++){
				bmainBracket[t1][t2][t3][t4][t]=true;
			}
			bmainBracket[t1][t2][t3][t4][mainBracket[t1][t2][t3][t4]]=false;
		}
	}
	/*
	public static void allset(byte x[][][][][],boolean y[][][][][]){
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						set(x[t1][t2][t3][t4],y[t1][t2][t3][t4]);
					}
				}
			}
		}
	} 
	public static void read(byte x[],boolean y[]){
		byte countb=0;
		for(byte t=0;t<9;t++){
			if(y[t]==false){
				x[0]=t;
				countb++;
			}
		}
		if(countb==1){}else{
			x[0]=-1;
		}
	}
	public static void equalb(boolean x[][][][][],boolean y[][][][][]){
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						for(byte t5=0;t5<9;t5++){
							x[t1][t2][t3][t4][t5]=y[t1][t2][t3][t4][t5];
						}
					}
				}
			}
		}
	}
	public static void method1(){
		byte currentLayer;
		for(byte t1=0;t1<3;t1++){
			for(byte t2=0;t2<3;t2++){
				for(byte t3=0;t3<3;t3++){
					for(byte t4=0;t4<3;t4++){
						if(mainBracket[t1][t2][t3][t4][0]==-1){}else{
							currentLayer=mainBracket[t1][t2][t3][t4][0];
							for(byte tt1=0;tt1<3;tt1++){
								for(byte tt2=0;tt2<3;tt2++){
									bmainBracket[t1][t2][tt1][tt2][currentLayer]=true;
									bmainBracket[tt1][tt2][t3][t4][currentLayer]=true;
									bmainBracket[t1][tt1][t3][tt2][currentLayer]=true;
								}
							}
							bmainBracket[t1][t2][t3][t4][currentLayer]=false;
						}
					}
				}
			}
		}
	}
	*/
}